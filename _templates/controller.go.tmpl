package controllers

import (
	"encoding/json"
	"net/http"

	dbpkg "{{ .ImportDir }}/db"
	"{{ .ImportDir }}/helper"
	"{{ .ImportDir }}/models"
	"{{ .ImportDir }}/version"

	"github.com/gin-gonic/gin"
)

// @summary Get{{ pluralize .Model.Name }}
// @produce json
// @param limit query integer false "Maximum number of items" default(25) mininum(10) maxinum(100)
// @param fields query string false "Fields to receive" default(*)
// @param pretty query boolean false "Prettify JSON response" default(false)
// @param stream query boolean false "Return JSON in streaming format" default(false)
// @param sort query string false "Retrieves a list in order of priority. + or (none) : ascending. - : descending"
// @param page query integer false "Page to receive" default(1)
// @param last_id query integer false "Beginning ID of items"
// @param order query string false "Order of items: asc or desc. use this with last_id, ex: limit=5&last_id=10&order=desc List 5 items (ID < 10) " default(desc)
// @success 200 {array} models.{{ .Model.Name }}
// @failure 404 {string} json
// @router /{{ pluralize .Model.Name | toLower }} [get]
func Get{{ pluralize .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db := dbpkg.DBInstance(c)
	parameter, err := dbpkg.NewParameter(c, models.{{ .Model.Name }}{})
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db, err = parameter.Paginate(db)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db = parameter.SetPreloads(db)
	db = parameter.SortRecords(db)
	db = parameter.FilterFields(db)
	{{ pluralize (toLowerCamelCase .Model.Name) }} := []models.{{ .Model.Name }}{}
	fields := helper.ParseFields(c.DefaultQuery("fields", "*"))
	queryFields := helper.QueryFields(models.{{ .Model.Name }}{}, fields)

	if err := db.Select(queryFields).Find(&{{ pluralize (toLowerCamelCase .Model.Name) }}).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	index := 0

	if len({{ pluralize (toLowerCamelCase .Model.Name) }}) > 0 {
		index = int({{ pluralize (toLowerCamelCase .Model.Name) }}[len({{ pluralize (toLowerCamelCase .Model.Name) }})-1].ID)
	}

	if err := parameter.SetHeaderLink(c, index); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	if v, ok := c.GetQuery("stream"); ok && v == "true" {
		enc := json.NewEncoder(c.Writer)
		c.Status(200)

		for _, {{ toLowerCamelCase .Model.Name }} := range {{ pluralize (toLowerCamelCase .Model.Name) }} {
			fieldMap, err := helper.FieldToMap({{ toLowerCamelCase .Model.Name }}, fields)
			if err != nil {
				c.JSON(400, gin.H{"error": err.Error()})
				return
			}

			if err := enc.Encode(fieldMap); err != nil {
				c.JSON(400, gin.H{"error": err.Error()})
				return
			}
		}
	} else {
		fieldMaps := []map[string]interface{}{}

		for _, {{ toLowerCamelCase .Model.Name }} := range {{ pluralize (toLowerCamelCase .Model.Name) }} {
			fieldMap, err := helper.FieldToMap({{ toLowerCamelCase .Model.Name }}, fields)
			if err != nil {
				c.JSON(400, gin.H{"error": err.Error()})
				return
			}

			fieldMaps = append(fieldMaps, fieldMap)
		}

		if v, ok := c.GetQuery("pretty"); ok && v == "true" {
			c.IndentedJSON(200, fieldMaps)
		} else {
			c.JSON(200, fieldMaps)
		}
	}
}

// @summary Get{{ .Model.Name }}
// @produce json
// @param id path int true "{{ .Model.Name }} ID"
// @param fields query string false "Fields to receive" default(*)
// @param pretty query boolean false "Prettify JSON response" default(false)
// @success 200 {object} models.{{ .Model.Name }}
// @failure 404 {string} json
// @router /{{ pluralize .Model.Name | toLower }}/{id} [get]
func Get{{ .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db := dbpkg.DBInstance(c)
	parameter, err := dbpkg.NewParameter(c, models.{{ .Model.Name }}{})
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db = parameter.SetPreloads(db)
	{{ toLowerCamelCase .Model.Name }} := models.{{ .Model.Name }}{}
	id := c.Params.ByName("id")
	fields := helper.ParseFields(c.DefaultQuery("fields", "*"))
	queryFields := helper.QueryFields(models.{{ .Model.Name }}{}, fields)

	if err := db.Select(queryFields).First(&{{ toLowerCamelCase .Model.Name }}, id).Error; err != nil {
		content := gin.H{"error": "{{ toLower .Model.Name }} with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}

	fieldMap, err := helper.FieldToMap({{ toLowerCamelCase .Model.Name }}, fields)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	if _, ok := c.GetQuery("pretty"); ok {
		c.IndentedJSON(200, fieldMap)
	} else {
		c.JSON(200, fieldMap)
	}
}

// @summary Create{{ .Model.Name }}
// @description 測試新增記錄時, 請先編輯 Example Value 欄位, 去除JSON中的 "createdAt" 及 "id"
// @accept json
// @produce json
// @param  {{ toLower .Model.Name }} body models.{{ .Model.Name }} true "{{ .Model.Name }} JSON"
// @success 200 {object} models.{{ .Model.Name }} 
// @router /{{ pluralize .Model.Name | toLower }} [post]
func Create{{ .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db := dbpkg.DBInstance(c)
	{{ toLowerCamelCase .Model.Name }} := models.{{ .Model.Name }}{}

	if err := c.Bind(&{{ toLowerCamelCase .Model.Name }}); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if err := db.Create(&{{ toLowerCamelCase .Model.Name }}).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	c.JSON(201, {{ toLowerCamelCase .Model.Name }})
}

// @Summary Update{{ .Model.Name }}
// @Accept json
// @Produce json
// @Param id path int true "{{ .Model.Name }} ID"
// @Param  {{ toLower .Model.Name }} body models.{{ .Model.Name }} true "{{ .Model.Name }} JSON"
// @Success 200 {object} models.{{ .Model.Name }}
// @failure 404 {string} json
// @Router /{{ pluralize .Model.Name | toLower }}/{id} [put]
func Update{{ .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db := dbpkg.DBInstance(c)
	id := c.Params.ByName("id")
	{{ toLowerCamelCase .Model.Name }} := models.{{ .Model.Name }}{}

	if db.First(&{{ toLowerCamelCase .Model.Name }}, id).Error != nil {
		content := gin.H{"error": "{{ toLower .Model.Name }} with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}

	if err := c.Bind(&{{ toLowerCamelCase .Model.Name }}); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if err := db.Save(&{{ toLowerCamelCase .Model.Name }}).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	c.JSON(200, {{ toLowerCamelCase .Model.Name }})
}

// @Summary Delete{{ .Model.Name }}
// @Produce json
// @Param id path int true "{{ .Model.Name }} ID"
// @Success 200 {string} json "{ "id #14": "deleted" }"
// @failure 404 {string} json
// @Router /{{ pluralize .Model.Name | toLower }}/{id} [delete]
func Delete{{ .Model.Name }}(c *gin.Context) {
	ver, err := version.New(c)
	if err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	db := dbpkg.DBInstance(c)
	id := c.Params.ByName("id")
	{{ toLowerCamelCase .Model.Name }} := models.{{ .Model.Name }}{}

	if db.First(&{{ toLowerCamelCase .Model.Name }}, id).Error != nil {
		content := gin.H{"error": "{{ toLower .Model.Name }} with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}

	if err := db.Delete(&{{ toLowerCamelCase .Model.Name }}).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if version.Range("1.0.0", "<=", ver) && version.Range(ver, "<", "2.0.0") {
		// conditional branch by version.
		// 1.0.0 <= this version < 2.0.0 !!
	}

	c.Writer.WriteHeader(http.StatusNoContent)
}
